// <auto-generated />
using System;
using MVCHamburgerciOtomasyonu.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCHamburgerciOtomasyonu.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231112161045_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("343f8370-28d4-4ade-91df-7965041b98f1"),
                            ConcurrencyStamp = "95966d4b-ca4c-4711-80a5-f446fbca86c3",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("f0a0b477-42aa-47fd-9e01-a81da466848d"),
                            ConcurrencyStamp = "ae37c50f-7c71-44d2-920d-1047302ac5e9",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d41f1d5d-8b02-4866-a09f-a494447762cf",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            ImageID = new Guid("930abce6-6f8c-4144-9332-ed04a7f0c40a"),
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyo+4RD2Qm6q2AAfDC8iOnq4smX1K1kkhcIHJUmf6t4ebn59mr+aXuBHHgOWdZtEg==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6f209e06-0ba8-448a-bbcc-85b6f2b8e01c",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b207b056-26ac-4be9-b6a5-07eb8c9e8d76"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1a8cf46-3696-40ab-b34a-dcf422e940cf",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            ImageID = new Guid("01673030-c382-45f8-84dc-a095bf6a7532"),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLtSOP4wySOea7I85ESKSnSe+Jpk6cTwFETa5NznbkDPzGSkdQD341VTnxZCYdr1g==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "38a1a4f6-3ac7-40ef-bba7-76e6599bfa0a",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("MenuID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Extra", b =>
                {
                    b.Property<Guid>("ExtraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExtraID");

                    b.HasIndex("CartItemID");

                    b.HasIndex("ImageID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Extras");

                    b.HasData(
                        new
                        {
                            ExtraID = new Guid("5fbdf069-889e-4f44-9984-55719389ee3c"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(1785),
                            ImageID = new Guid("b5c2acf1-6b30-4e5d-8af4-5b195eeec91a"),
                            IsDeleted = false,
                            Name = "Tırtıklı Patates",
                            Price = 10.00m
                        },
                        new
                        {
                            ExtraID = new Guid("941ea186-ad0e-407a-9694-99f5160b680f"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(1814),
                            ImageID = new Guid("f8158844-15d4-4014-be20-745a147449b5"),
                            IsDeleted = false,
                            Name = "Soğan Halkası",
                            Price = 20.00m
                        },
                        new
                        {
                            ExtraID = new Guid("20f69585-ac98-4213-8cfb-07d3b37927aa"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(1817),
                            ImageID = new Guid("0f0e98fa-6b24-4c0e-9d2c-9afa9220a610"),
                            IsDeleted = false,
                            Name = "Çıtır Peynir",
                            Price = 25.00m
                        },
                        new
                        {
                            ExtraID = new Guid("ea151fc1-5451-49ae-84ee-dd4315d021ca"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(1819),
                            ImageID = new Guid("88057a22-8de7-4c7a-b712-c4053403ae60"),
                            IsDeleted = false,
                            Name = "I-FEAT King Nuggets",
                            Price = 35.00m
                        },
                        new
                        {
                            ExtraID = new Guid("866d8813-a009-451a-a4a2-283509b60ae6"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(1821),
                            ImageID = new Guid("81fcbc63-54c7-4ddb-92aa-f677c1a144bb"),
                            IsDeleted = false,
                            Name = "Chicken Tenders",
                            Price = 45.00m
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageID = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2119),
                            FileName = "menu-images/big-king-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("585cecbc-cf45-4198-910f-4fc0b0d07c2d"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2124),
                            FileName = "menu-images/cheeseburger-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("0fc8f1ca-5366-4cb7-8492-5d17687cb648"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2127),
                            FileName = "menu-images/chicken-royale-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("c213dfec-2010-494c-a132-91fb6d8334cc"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2129),
                            FileName = "menu-images/king-chicken-1.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("09086832-f4c9-4b09-8df4-055014d961c5"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2132),
                            FileName = "menu-images/double-whopper-jr.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("109baf81-2778-42e5-84cd-9b95ea88f1a7"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2135),
                            FileName = "menu-images/fish-royale-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("ba68b7c8-504c-4abd-bb46-5add111b48bc"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2137),
                            FileName = "menu-images/kofteburger-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("9cbc9994-f594-4ffb-97b2-45d09f9f10f4"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2140),
                            FileName = "menu-images/tavukburger-menu.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("88057a22-8de7-4c7a-b712-c4053403ae60"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2183),
                            FileName = "extra-images/bk-king-nuggets-1.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("81fcbc63-54c7-4ddb-92aa-f677c1a144bb"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2186),
                            FileName = "extra-images/chicken-tenders.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("0f0e98fa-6b24-4c0e-9d2c-9afa9220a610"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2188),
                            FileName = "extra-images/citir-peynir.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("f8158844-15d4-4014-be20-745a147449b5"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2191),
                            FileName = "extra-images/sogan-halkasi.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("b5c2acf1-6b30-4e5d-8af4-5b195eeec91a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2193),
                            FileName = "extra-images/tirtikli-patates.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("01673030-c382-45f8-84dc-a095bf6a7532"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2196),
                            FileName = "user-images/user.png",
                            FileType = "image/png",
                            IsDeleted = false
                        },
                        new
                        {
                            ImageID = new Guid("930abce6-6f8c-4144-9332-ed04a7f0c40a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2198),
                            FileName = "user-images/superadmin.png",
                            FileType = "image/png",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Menu", b =>
                {
                    b.Property<Guid>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuID");

                    b.HasIndex("ImageID");

                    b.HasIndex("UserID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuID = new Guid("31df718a-1182-48ef-a5ed-419db6a217fa"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2509),
                            ImageID = new Guid("c213dfec-2010-494c-a132-91fb6d8334cc"),
                            IsDeleted = false,
                            Name = "King Chicken",
                            Price = 150.00m
                        },
                        new
                        {
                            MenuID = new Guid("4454da72-6c4c-4f57-b51a-76c50c8c8c05"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2514),
                            ImageID = new Guid("09086832-f4c9-4b09-8df4-055014d961c5"),
                            IsDeleted = false,
                            Name = "Double Whopper",
                            Price = 160.00m
                        },
                        new
                        {
                            MenuID = new Guid("b1ef787b-b80b-46e9-b827-51c9c05770a6"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2518),
                            ImageID = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            IsDeleted = false,
                            Name = "Big King",
                            Price = 170.00m
                        },
                        new
                        {
                            MenuID = new Guid("5be15229-6970-4e16-84e3-afa6a0124977"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2521),
                            ImageID = new Guid("109baf81-2778-42e5-84cd-9b95ea88f1a7"),
                            IsDeleted = false,
                            Name = "Fish Royale",
                            Price = 180.00m
                        },
                        new
                        {
                            MenuID = new Guid("fd87ed69-9f92-4ff1-8d13-8435117a63e0"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2524),
                            ImageID = new Guid("9cbc9994-f594-4ffb-97b2-45d09f9f10f4"),
                            IsDeleted = false,
                            Name = "Tavuk Burger Menü",
                            Price = 190.00m
                        },
                        new
                        {
                            MenuID = new Guid("b68520c4-3c03-4dd1-b3e9-3024d9c53d55"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2527),
                            ImageID = new Guid("0fc8f1ca-5366-4cb7-8492-5d17687cb648"),
                            IsDeleted = false,
                            Name = "Chicken Royale",
                            Price = 200.00m
                        },
                        new
                        {
                            MenuID = new Guid("66c8e428-7a09-4449-a605-64f9497ae2ce"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2530),
                            ImageID = new Guid("ba68b7c8-504c-4abd-bb46-5add111b48bc"),
                            IsDeleted = false,
                            Name = "Köfte Burger",
                            Price = 220.00m
                        },
                        new
                        {
                            MenuID = new Guid("6c885842-c524-42ef-af4d-da3e70952e18"),
                            CreatedBy = "Super Admın",
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2533),
                            ImageID = new Guid("585cecbc-cf45-4198-910f-4fc0b0d07c2d"),
                            IsDeleted = false,
                            Name = "CheeseBurger Menü",
                            Price = 250.00m
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.MenuSize", b =>
                {
                    b.Property<Guid>("MenuSizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuSizeID");

                    b.HasIndex("UserID");

                    b.ToTable("MenuSizes");

                    b.HasData(
                        new
                        {
                            MenuSizeID = new Guid("9a9cdfac-f735-47cf-a24d-f93ec613e09b"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2695),
                            IsDeleted = false,
                            PriceModifier = 0m,
                            SizeName = "Normal Boy"
                        },
                        new
                        {
                            MenuSizeID = new Guid("14b9c7df-6cf5-4a99-ae1c-c0a59ee4102c"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2699),
                            IsDeleted = false,
                            PriceModifier = 15.00m,
                            SizeName = "Büyük Boy"
                        },
                        new
                        {
                            MenuSizeID = new Guid("de6c42d5-1cb2-430d-8e48-d4fe931d4843"),
                            CreatedDate = new DateTime(2023, 11, 12, 19, 10, 44, 658, DateTimeKind.Local).AddTicks(2701),
                            IsDeleted = false,
                            PriceModifier = 20.00m,
                            SizeName = "King Boy"
                        });
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MessageStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReceiverUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageID");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MenuSizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("MenuID");

                    b.HasIndex("MenuSizeID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("343f8370-28d4-4ade-91df-7965041b98f1")
                        },
                        new
                        {
                            UserId = new Guid("b207b056-26ac-4be9-b6a5-07eb8c9e8d76"),
                            RoleId = new Guid("f0a0b477-42aa-47fd-9e01-a81da466848d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageID");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.CartItem", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Extra", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.CartItem", null)
                        .WithMany("Extras")
                        .HasForeignKey("CartItemID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Image", "Image")
                        .WithMany("Extras")
                        .HasForeignKey("ImageID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Order", null)
                        .WithMany("Extras")
                        .HasForeignKey("OrderID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Menu", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Image", "Image")
                        .WithMany("Menus")
                        .HasForeignKey("ImageID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.MenuSize", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Message", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Order", b =>
                {
                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.Menu", "Menu")
                        .WithMany("Orders")
                        .HasForeignKey("MenuID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.MenuSize", "MenuSize")
                        .WithMany("Orders")
                        .HasForeignKey("MenuSizeID");

                    b.HasOne("MVCHamburgerciOtomasyonu.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Menu");

                    b.Navigation("MenuSize");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.CartItem", b =>
                {
                    b.Navigation("Extras");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Image", b =>
                {
                    b.Navigation("Extras");

                    b.Navigation("Menus");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Menu", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.MenuSize", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MVCHamburgerciOtomasyonu.Entity.Entities.Order", b =>
                {
                    b.Navigation("Extras");
                });
#pragma warning restore 612, 618
        }
    }
}
